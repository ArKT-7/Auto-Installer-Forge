#!/bin/sh
#
# Copyright (C) 2025-26 https://github.com/ArKT-7/Auto-Installer-Forge
#
# Made For Processing ROMs containing payload.bin, converts them into a ready-to-flash super.img, and generates a fully automated installation package for Fastboot or Recovery, which can later be flashed using my custom flasher scripts.

# Define URLs and target paths for binaries
URL_BUSYBOX="https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/busybox"
URL_PAYLOAD_DUMPER="https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/payload-dumper-go"
URL_LPMAKE="https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/lpmake"
URL_LPUNPACK="https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/lpunpack"

BIN_DIR="/dev/tmp/arkt"
WORK_DIR="/sdcard/arkt-auto-installer"
MAGISK_DIR="$BIN_DIR/magisk_patch"

#mkdir -p "$BIN_DIR"
mkdir -p "$MAGISK_DIR"
mkdir -p "$WORK_DIR"

log() {
    echo ""
    echo "[$(date +"%H:%M:%S")] $1"
}

ARCH=$(getprop ro.product.cpu.abi)

# Function to download and set permissions
download_and_set_permissions() {
    local url=$1 dest_file=$2
    log "[INFO] Downloading $(basename "$dest_file")..."
    curl -L --progress-bar -o "$dest_file" "$url" || { log "[ERROR] Failed to download $(basename "$dest_file")"; exit 1; }
    chmod 755 "$dest_file"
    echo "[SUCCESS] $(basename "$dest_file") ready."
}

# Function to download files without setting permissions
download_file() {
    local url=$1 dest_file=$2
    #echo "[INFO] Downloading $(basename "$dest_file")..."
    curl -L --progress-bar -o "$dest_file" "$url" || { log "[ERROR] Failed to download $(basename "$dest_file")"; }
    echo "[SUCCESS] $(basename "$dest_file") downloaded."
}

# Function to extract checksum from file
get_checksum() {
    local filename="$1"
    if [ "$CHECKSUM_AVAILABLE" -eq 0 ]; then
        echo ""
        return
    fi
    grep "^$filename=" "$CHECKSUM_FILE" | cut -d'=' -f2
}


# Function to verify checksum
verify_checksum() {
    local file="$1"
    local expected_checksum="$2"

    if [ "$CHECKSUM_AVAILABLE" -eq 0 ]; then
        #echo "[WARNING] Checksum verification skipped for $(basename "$file")."
        return 0
    fi

    if [ -z "$expected_checksum" ]; then
        echo "[WARNING] No checksum found for $(basename "$file"), skipping verification."
        return 0  # Skip verification if no checksum is available
    fi

    local actual_checksum
    actual_checksum=$($BIN_DIR/busybox sha256sum "$file" | awk '{print $1}')

    if [ "$actual_checksum" = "$expected_checksum" ]; then
        #echo "[SUCCESS] Checksum verified for $(basename "$file")."
        return 0
    else
        echo "\n[ERROR] Checksum mismatch for $(basename "$file")! Expected: $expected_checksum, Got: $actual_checksum"
        return 1
    fi
}

# Function to attempt download with checksum validation
download_with_fallback() {
    PRIMARY_URL="$1"
    FALLBACK_URL="$2"
    DEST_FILE="$3"
    FILE_KEY="$4"  # Key name in checksum file

    #echo "[INFO] Downloading: $(basename "$DEST_FILE")"

    EXPECTED_CHECKSUM=$(get_checksum "$FILE_KEY")

    if download_file "$PRIMARY_URL" "$DEST_FILE"; then
        if verify_checksum "$DEST_FILE" "$EXPECTED_CHECKSUM"; then
            return 0  # Download successful with valid checksum
        else
            echo "[WARNING] Checksum mismatch, trying fallback...\n"
            rm -f "$DEST_FILE"
        fi
    else
        echo "[WARNING] Primary download failed, trying fallback...\n"
    fi

    # Try downloading from fallback source
    if download_file "$FALLBACK_URL" "$DEST_FILE"; then
        if verify_checksum "$DEST_FILE" "$EXPECTED_CHECKSUM"; then
            return 0  # Fallback successful with valid checksum
        else
            echo "[ERROR] Fallback checksum mismatch! Continuing with warning...\n"
            return 1
        fi
    else
        echo "[ERROR] Failed to download $(basename "$DEST_FILE") from both sources! Continuing..."
        return 1
    fi
}

# Function to patch boot.img with magisk
patch_magisk_boot() {
    log "[INFO] Patching boot.img with Magisk 28.1...\n"

    # Unzip only assets and lib folders; if unzip fails, exit
    if ! $BIN_DIR/busybox unzip -q -o "$TARGET_DIR/ROOT_APK_INSATLL_THIS_ONLY/Magisk_v28.1.apk" "assets/*" "lib/*" -d "$MAGISK_DIR"; then
        log "[ERROR] Failed to unzip Magisk APK"
        return 1
    fi

    case "$ARCH" in
        arm64-v8a) ARCH_DIR="arm64-v8a" ;;
        armeabi-v7a) ARCH_DIR="armeabi-v7a" ;;
        x86) ARCH_DIR="x86" ;;
        x86_64) ARCH_DIR="x86_64" ;;
        *) log "[ERROR] Unsupported architecture: $ARCH"; return 1 ;;
    esac

    LIB_PATH="$MAGISK_DIR/lib/$ARCH_DIR"
    if [ -d "$LIB_PATH" ]; then
        for file in "$LIB_PATH"/*.so; do
            [ -f "$file" ] || continue
            new_name=$(basename "$file" | $BIN_DIR/busybox sed -E 's/^lib(.*)\.so$/\1/')
            mv "$file" "$MAGISK_DIR/assets/$new_name"
        done
    else
        log "[ERROR] Library folder not found for $ARCH_DIR"
        return 1
    fi

    chmod -R 777 "$MAGISK_DIR/assets/"

    # Modify boot_patch.sh to hardcode "sda19" for NABU
    if ! $BIN_DIR/busybox sed -i 's/\$BOOTMODE && \[ -z "\$PREINITDEVICE" \] && PREINITDEVICE=\$(\.\/magisk --preinit-device)/PREINITDEVICE="sda19"/' "$MAGISK_DIR/assets/boot_patch.sh"; then
        log "[ERROR] Failed to modify boot_patch.sh"
        return 1
    fi

    "$MAGISK_DIR/assets/boot_patch.sh" "$TARGET_DIR/images/boot.img"

    if [ -f "$MAGISK_DIR/assets/new-boot.img" ]; then
        $BIN_DIR/busybox cp "$MAGISK_DIR/assets/new-boot.img" "$TARGET_DIR/images/magisk_boot.img"
        log "[SUCCESS] Patching successful! Magisk boot image saved at: $TARGET_DIR/images/magisk_boot.img"
    else
        log "[ERROR] Patching unsuccessful. Please patch manually and add to /images folder..."
        return 1
    fi

    return 0
}


log "[INFO] Automating ROM conversion for easy Fastboot/Recovery flashing for Xiaomi Pad 5 (more devices planned)"
log "[INFO] this script is Written and Made By °⊥⋊ɹ∀°, Telegram - '@ArKT_7', Github - 'ArKT-7'"

AVAILABLE_SPACE=$(df "$WORK_DIR" | awk 'NR==2 {print $4}')
if [ "$AVAILABLE_SPACE" -lt 15000000 ]; then
    log "[ERROR] Not enough space. Need at least 15GB free!"
    exit 1
fi

# Download required binaries
download_and_set_permissions "$URL_BUSYBOX" "$BIN_DIR/busybox"
download_and_set_permissions "$URL_PAYLOAD_DUMPER" "$BIN_DIR/payload-dumper-go"
download_and_set_permissions "$URL_LPMAKE" "$BIN_DIR/lpmake"
download_and_set_permissions "$URL_LPUNPACK" "$BIN_DIR/lpunpack"
# URL to the checksum file
CHECKSUM_FILE="$BIN_DIR/checksum.arkt"
CHECKSUM_AVAILABLE=1  # Assume checksum is available

# Download checksum file
#echo "[INFO] Downloading checksum file..."
if ! download_file "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/checksum.arkt" "$CHECKSUM_FILE"; then
    #echo "[WARNING] Failed to download checksum file. Continuing without checksum verification!"
    CHECKSUM_AVAILABLE=0  # Set flag to disable checksum verification
elif ! grep -q "=" "$CHECKSUM_FILE"; then
    #echo "[WARNING] Checksum file is invalid or empty. Skipping verification!"
    CHECKSUM_AVAILABLE=0  # Mark as unavailable if it's empty or corrupted
fi

if [ -d "$WORK_DIR" ]; then
    # Check if the directory contains any files or only empty folders
	if [ -n "$($BIN_DIR/busybox find "$WORK_DIR" -mindepth 1 -type f 2>/dev/null)" ]; then
        while true; do
            echo "\n[WARNING] Existing files found in $WORK_DIR. Choose an option:\n"
            echo "1) Delete all existing files from $WORK_DIR and start fresh"
            echo "2) Move old files to a backup folder"
            echo "3) Exit script"
            read -r choice

            case "$choice" in
                1)
                    log "[INFO] Deleting existing files..."
                    $BIN_DIR/busybox rm -rf "$WORK_DIR"/*
                    echo "[SUCCESS] Old files deleted."
                    break
                    ;;
                2)
                    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                    BACKUP_DIR="${WORK_DIR}_backup_$TIMESTAMP"
                    log "[INFO] Moving old files to $BACKUP_DIR..."
                    $BIN_DIR/busybox mkdir -p "$BACKUP_DIR"
                    $BIN_DIR/busybox mv "$WORK_DIR"/* "$BACKUP_DIR"/
                    echo "[SUCCESS] Files moved to $BACKUP_DIR."
                    break
                    ;;
                3)
                    log "[INFO] Exiting script. No changes made."
                    exit 0
                    ;;
                *)
                    log "[ERROR] Invalid input. Please select a valid option (1/2/3)."
                    ;;
            esac
        done
    else
        # If only empty folders or no content exists, delete and recreate it
        # log "[INFO] Work directory is empty or contains only empty folders. Cleaning up..."
        $BIN_DIR/busybox rm -rf "$WORK_DIR"
        $BIN_DIR/busybox mkdir -p "$WORK_DIR"
        # log "[SUCCESS] Clean workspace ready."
    fi
fi

echo ""
echo "Searching for AOSP ROM RECOVERY ZIP files containing payload.bin..."
echo ""
# Initialize variables
count=1
files=()  # Array to store valid file paths
temp_file="$BIN_DIR/zip_list.txt"  # Temporary file in the current working directory

# Use find to search for ZIP files while excluding "Android" and hidden folders
$BIN_DIR/busybox find "/sdcard/" \
    -type d \( -name "Android" -o -name ".*" \) -prune -o \
    -type f -name "*.zip" -print > "$temp_file"

# Read the find results line by line
while IFS= read -r file; do
    if [ -f "$file" ]; then
        # Check if the ZIP contains payload.bin
        if $BIN_DIR/busybox unzip -l "$file" | $BIN_DIR/busybox grep -q "payload.bin"; then
            RELATIVE_PATH=${file#/sdcard/}  # Remove /sdcard/ from the path
            echo "$count. $RELATIVE_PATH"  # Print relative path instead of just filename
          # echo "$count. $(basename "$file")"  # Print only the filename
            files[$count]="$file"  # Store the full file path
            count=$((count + 1))
        fi
    fi
done < "$temp_file"


# Clean up the temporary file
rm -f "$temp_file"

# Check if no valid ZIP files were found
if [ "$count" -eq 1 ]; then
    echo "No valid AOSP ROM ZIP files found (must contain payload.bin)."
    exit 1
fi

# Automatically select the ZIP file if only one is available
if [ "$count" -eq 2 ]; then
    SELECTED_ZIP_FILE="${files[1]}"
    echo ""
	echo "Only one valid ZIP file found: $(basename "$SELECTED_ZIP_FILE")"
    echo "Automatically selecting this file."
else
    # Prompt user for selection if multiple valid ZIPs are found
    echo ""
    echo "Enter the serial number of the ZIP file to select:"
    read -r selection

    # Validate ZIP file selection
    if [ -z "${files[$selection]}" ]; then
        echo "Invalid selection. Exiting."
        exit 1
    fi

    SELECTED_ZIP_FILE="${files[$selection]}"
fi

# Extract the filename (without extension) from the selected ZIP file
ZIP_NAME=$($BIN_DIR/busybox basename "$SELECTED_ZIP_FILE" .zip)
TARGET_DIR="$WORK_DIR/${ZIP_NAME}_FASTBOOT_RECOVERY"

# Create the directory
$BIN_DIR/busybox mkdir -p "$TARGET_DIR"

# Unzip only the payload.bin file into the created directory
echo " "
echo "Extracting payload.bin"
$BIN_DIR/busybox unzip -o "$SELECTED_ZIP_FILE" "payload.bin" -d "$TARGET_DIR"

# Check if extraction was successful
if [ ! -f "$TARGET_DIR/payload.bin" ]; then
    echo "[ERROR] payload.bin not found in the selected ZIP. Exiting."
    exit 1
fi

# Store the extracted payload.bin path in $PAYLOAD_FILE
PAYLOAD_FILE="$TARGET_DIR/payload.bin"

echo "payload.bin extraction complete."

log "[INFO] Extracting payload.bin..."
echo " "
$BIN_DIR/payload-dumper-go -o "$TARGET_DIR" "$PAYLOAD_FILE" || { log "[ERROR] Extraction failed!"; exit 1; }
log "[SUCCESS] Extraction completed."

log "[INFO] Generating original checksums..."
for img in system vendor odm system_ext product; do
    $BIN_DIR/busybox mv "$TARGET_DIR/${img}.img" "$TARGET_DIR/${img}_a.img"
done
$BIN_DIR/busybox sha256sum "$TARGET_DIR/system_a.img" "$TARGET_DIR/vendor_a.img" "$TARGET_DIR/odm_a.img" "$TARGET_DIR/system_ext_a.img" "$TARGET_DIR/product_a.img" > "$TARGET_DIR/original_checksums.txt"
echo "[SUCCESS] Checksums generated."

log "[INFO] Calculating total partition size with buffer..."
TOTAL_SIZE=$($BIN_DIR/busybox du -b "$TARGET_DIR/system_a.img" "$TARGET_DIR/vendor_a.img" "$TARGET_DIR/odm_a.img" "$TARGET_DIR/system_ext_a.img" "$TARGET_DIR/product_a.img" | $BIN_DIR/busybox awk '{sum += $1} END {print sum + (24 * 1024 * 1024); exit}')
echo "Total size (with buffer): $TOTAL_SIZE"

log "[INFO] Creating super.img..."
echo ""
$BIN_DIR/lpmake \
--metadata-size 65536 \
--metadata-slots 3 \
--device super:9126805504 \
--super-name super \
--group super_group_a:9126805504 \
--group super_group_b:9126805504 \
--partition odm_a:readonly:$(wc -c <"$TARGET_DIR/odm_a.img"):super_group_a --image odm_a="$TARGET_DIR/odm_a.img" \
--partition odm_b:readonly:0:super_group_b \
--partition product_a:readonly:$(wc -c <"$TARGET_DIR/product_a.img"):super_group_a --image product_a="$TARGET_DIR/product_a.img" \
--partition product_b:readonly:0:super_group_b \
--partition system_a:readonly:$(wc -c <"$TARGET_DIR/system_a.img"):super_group_a --image system_a="$TARGET_DIR/system_a.img" \
--partition system_b:readonly:0:super_group_b \
--partition system_ext_a:readonly:$(wc -c <"$TARGET_DIR/system_ext_a.img"):super_group_a --image system_ext_a="$TARGET_DIR/system_ext_a.img" \
--partition system_ext_b:readonly:0:super_group_b \
--partition vendor_a:readonly:$(wc -c <"$TARGET_DIR/vendor_a.img"):super_group_a --image vendor_a="$TARGET_DIR/vendor_a.img" \
--partition vendor_b:readonly:0:super_group_b \
--virtual-ab \
--output "$TARGET_DIR/super.img"

log "[SUCCESS] super.img created."

log "[INFO] Truncating super.img..."
$BIN_DIR/busybox truncate -s "$TOTAL_SIZE" "$TARGET_DIR/super.img"
echo "[SUCCESS] Truncation complete."

log "[INFO] Cleaning up payload.bin extrated img's..."
$BIN_DIR/busybox rm -f "$TARGET_DIR/system_a.img" "$TARGET_DIR/vendor_a.img" "$TARGET_DIR/odm_a.img" "$TARGET_DIR/system_ext_a.img" "$TARGET_DIR/product_a.img" "$PAYLOAD_FILE" 
echo "[SUCCESS] Cleanup complete."

log "[INFO] Extracting super.img..."
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/super_extracted"
$BIN_DIR/lpunpack "$TARGET_DIR/super.img" "$TARGET_DIR/super_extracted" || { log "[ERROR] Extraction failed!"; exit 1; }
echo "[SUCCESS] super.img extracted."

log "[INFO] Generating new checksums..."
$BIN_DIR/busybox sha256sum "$TARGET_DIR/super_extracted/system_a.img" "$TARGET_DIR/super_extracted/vendor_a.img" "$TARGET_DIR/super_extracted/odm_a.img" "$TARGET_DIR/super_extracted/system_ext_a.img" "$TARGET_DIR/super_extracted/product_a.img" > "$TARGET_DIR/new_checksums.txt"
echo "[SUCCESS] Checksums generated."

log "[INFO] Normalizing checksums for comparison..."
$BIN_DIR/busybox sed -E "s|(_a)?\.img|.img|" "$TARGET_DIR/original_checksums.txt" | $BIN_DIR/busybox sed -E "s|$TARGET_DIR|/tmp|" > "$TARGET_DIR/original_checksums_norm.txt"
$BIN_DIR/busybox sed -E "s|(_a)?\.img|.img|" "$TARGET_DIR/new_checksums.txt" | $BIN_DIR/busybox sed -E "s|$TARGET_DIR/super_extracted|/tmp|" > "$TARGET_DIR/new_checksums_norm.txt"

log "[INFO] Comparing checksums..."
$BIN_DIR/busybox diff "$TARGET_DIR/original_checksums_norm.txt" "$TARGET_DIR/new_checksums_norm.txt" || log "[WARNING] Checksum mismatch detected!"
echo "[SUCCESS] Checksum comparison complete."

log "[COMPLETED] super.img prepared to use in fastboot/recovery!"

log "[INFO] Cleaning up..."
$BIN_DIR/busybox rm -rf "$TARGET_DIR/super_extracted"
$BIN_DIR/busybox rm -f "$TARGET_DIR/original_checksums.txt" "$TARGET_DIR/new_checksums.txt" "$TARGET_DIR/original_checksums_norm.txt" "$TARGET_DIR/new_checksums_norm.txt" 
echo "[SUCCESS] Cleanup complete."

log "[INFO] Now will contrust folder/files and Download Scripts as required for auto-installer!\n[NOTE] Scripts downlaod with Derfest OS (ASCII/name) only (Will add other soon)\n"

$BIN_DIR/busybox mkdir -p "$TARGET_DIR/images" 
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/META-INF/com/google/android" 
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/META-INF/com/arkt" 
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/bin/windows/platform-tools"
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/bin/windows/log-tool" 
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/bin/linux/platform-tools" 
$BIN_DIR/busybox mkdir -p "$TARGET_DIR/ROOT_APK_INSATLL_THIS_ONLY"
for img in boot dtbo vendor_boot vbmeta vbmeta_system super; do
    $BIN_DIR/busybox mv "$TARGET_DIR/${img}.img" "$TARGET_DIR/images/${img}.img"
done

#still gotta upload to mirror location for fallback
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/userdata.img" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/userdata.img" \
    "$TARGET_DIR/images/userdata.img" \
    "userdata"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/bootctl" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/bootctl" \
    "$TARGET_DIR/META-INF/com/arkt/bootctl" \
    "bootctl"

download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/busybox" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/busybox" \
    "$TARGET_DIR/META-INF/com/arkt/busybox" \
    "busybox"

download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/libhidltransport.so" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/libhidltransport.so" \
    "$TARGET_DIR/META-INF/com/arkt/libhidltransport.so" \
    "libhidltransport"

download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/libhwbinder.so" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/libhwbinder.so" \
    "$TARGET_DIR/META-INF/com/arkt/libhwbinder.so" \
    "libhwbinder"

download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update-binary" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update-binary" \
    "$TARGET_DIR/META-INF/com/google/android/update-binary" \
    "update-binary"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/updater-script" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/updater-script" \
    "$TARGET_DIR/META-INF/com/google/android/updater-script" \
    "updater-script"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/install_derpfest_linux.sh" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/install_derpfest_linux.sh" \
    "$TARGET_DIR/install_derpfest_linux.sh" \
    "install-derpfest-linux-script"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/install_derpfest_windows.bat" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/install_derpfest_windows.bat" \
    "$TARGET_DIR/install_derpfest_windows.bat" \
    "install-derpfest-windows-script"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update_derpfest_linux.sh" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update_derpfest_linux.sh" \
    "$TARGET_DIR/update_derpfest_linux.sh" \
    "update-derpfest-linux-script"
	
download_with_fallback \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update_derpfest_windows.bat" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/derpfest-nabu/update_derpfest_windows.bat" \
    "$TARGET_DIR/update_derpfest_windows.bat" \
    "update-derpfest-windows-script"

log "[INFO] Downloading Platform-tools and required tools for auto-installer script...\n"

download_with_fallback \
    "https://dl.google.com/android/repository/platform-tools-latest-linux.zip" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/platform-tools-latest-linux.zip" \
    "$TARGET_DIR/bin/linux/platform-tools-linux.zip" \
    "pt-linux"
	
echo "[INFO] Extracting Linux platform-tools..."
$BIN_DIR/busybox unzip -q "$TARGET_DIR/bin/linux/platform-tools-linux.zip" -d "$TARGET_DIR/bin/linux/"
log "[SUCCESS] Linux platform-tools extracted.\n"

download_with_fallback \
    "https://dl.google.com/android/repository/platform-tools-latest-windows.zip" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/platform-tools-latest-windows.zip" \
    "$TARGET_DIR/bin/windows/platform-tools-windows.zip" \
    "pt-win"
	
echo "[INFO] Extracting Windows platform-tools..."
$BIN_DIR/busybox unzip -q "$TARGET_DIR/bin/windows/platform-tools-windows.zip" -d "$TARGET_DIR/bin/windows/"
log "[SUCCESS] Windows platform-tools extracted.\n"

download_with_fallback \
    "https://github.com/dEajL3kA/tee-win32/releases/download/1.3.3/tee-win32.2023-11-27.zip" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/tee-win32.2023-11-27.zip" \
    "$TARGET_DIR/bin/windows/tee.zip" \
    "tee"
	
echo "[INFO] Extracting tee for logging in windows..."
$BIN_DIR/busybox unzip -q "$TARGET_DIR/bin/windows/tee.zip" -d "$TARGET_DIR/bin/windows/log-tool/"
log "[SUCCESS] TEE for windows extracted."

log "[INFO] Now will Download KernelSU NEXT and Magisk APK for ROOT access!\n[NOTE] Manually Add Patched ksu-n_boot.img, ksu-n_dtbo.img and magisk_boot.img in /images folder\n"

download_with_fallback \
    "https://github.com/KernelSU-Next/KernelSU-Next/releases/download/v1.0.5/KernelSU_Next_v1.0.5_12430-release.apk" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/KernelSU_Next_v1.0.5.apk" \
    "$TARGET_DIR/ROOT_APK_INSATLL_THIS_ONLY/KernelSU_Next_v1.0.5.apk" \
    "KSU-N"

download_with_fallback \
    "https://github.com/topjohnwu/Magisk/releases/download/v28.1/Magisk-v28.1.apk" \
    "https://raw.githubusercontent.com/arkt-7/Auto-Installer-Forge/main/bin/files/Magisk_v28.1.apk" \
    "$TARGET_DIR/ROOT_APK_INSATLL_THIS_ONLY/Magisk_v28.1.apk" \
    "Magisk"

# Call the function
patch_magisk_boot


log "[INFO] Cleaning up..."
$BIN_DIR/busybox rm -f "$TARGET_DIR/bin/linux/platform-tools-linux.zip" "$TARGET_DIR/bin/windows/platform-tools-windows.zip" "$TARGET_DIR/bin/windows/tee.zip"
cd
rm -rf $BIN_DIR
echo "[SUCCESS] Cleanup complete."

log "[COMPLETED] Auto-installer process finished successfully!"
